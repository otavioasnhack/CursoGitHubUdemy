Conceito : É uma ramificação a partir do código fonte principal, separa as versões dos projetos.

- git branch
    Visualiza os branchs disponíveis. Usando o mesmo comando com um nome novo, CRIA UM NOVO BRANCH
- git -d ou --delete
    Deleta um branch (geralmente quando um branch foi criado errado)
- git checkout -b <nome>
    Muda para o branch passado após a flag / OBS: É necessário realizar o commit antes de mudar de branch 
- git merge <nome>
    Uni o código de dois branchs distintos / OBS: Por meio dele que recebe atualizações de outros devs
    Necessário estar na branch que deseja atualizar o código e passar o comando com o nome da que deseja puxar as atualizações

- git stash
    Salva as modificações atuais para prosseguir com uma outra abordagem de solução e não perder o código
    Após o comando, o branch será resetado para sua versão de acordo com o repositório
- git stash list / git stash apply e o ID /  git stash show -p
    Verifica as stashs criadas / Recupera as stashs / Exibi as alterações que foram feitas
- git stash clear / git stash drop <nome>
    Deleta as stashs de uma branch / Deleta uma stash específica
    
- git tag -a <nome> -m <msg>
    Cria tag nos branches, serve como um checkpoint e demarca estágios do desenvolvimento de algum recurso
- git show <nome>
    Verifica uma tag
- git checkout <nome>
    Troca de tags
- git push origin <nome> / git push origin --tags
    Envia para o repositório, sendo compartilhada entre os devs / Envia mais de uma tag